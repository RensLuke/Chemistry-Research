import glob
import os
'''
All_OutFile_Names = []
RunData = []

IsConstraint = True
path = "C:/Users/Luke/PycharmProjects/ChemistryScripts/hold"

for file in glob.glob(os.path.join(path, '*.out')):
    All_OutFile_Names.append(file)


Run_File_Path = All_OutFile_Names[0][:-4] + ".run"

if os.path.exists(Run_File_Path):
    with open(Run_File_Path, "r") as openFile:
        for line in openFile:
            if "CONSTRAINTS" in line:
                SkipFileRun = True  # If "Constraints" in file, allows for it to enter "formator" function
                while "END" not in line:
                    line = openFile.__next__()
                    if "END" in line:
                        break
                    elif "::" in line:
                        continue
                    else:
                        RunData.append(line)

    for x in range(len(RunData)):
        initial_list = ','.join(RunData[x].split())
        build = [x.strip() for x in initial_list.split(',')]

        if "DIST" in build[0]:
            build[0] = 'BOND RESTRAINT'
            build.extend(("2.0000", "0.0000000"))
        elif "DIHED" in build[0]:
            build[0] = 'TORSION RESTRAINT'
            build.extend(("1.00000", "0.0000"))
        elif "ANGLE" in build[0]:
            build[0] = 'ANGLE RESTRAINT'
            build.extend(("1.00000", "0.0000"))

        for i in range(len(build)):
            if "." not in build[i] and "RESTRAINT" not in build[i]:
                build[i] = build[i].ljust(len(build[i]) + 3)
            elif "RESTRAINT" in build[i]:
                build[i] = build[i].ljust(len(build[i]) + 3)
            elif "." in build[i] and "RESTRAINT" not in build[i]:
                if i == len(build):
                    build[i] = build[i].ljust(len(build[i]) + 2)
                else:
                    build[i] = build[i].ljust(len(build[i]) + 1)


        formatted_line = "".join(build)
        # print(formatted_line)


print("DESCRP " + Run_File_Path[Run_File_Path.find("\\")+1:-4])
'''

out_file_data = '    1.C         0.117298    3.673672   -1.187765\n', '    2.C         0.028491    2.632615   -2.327517\n', '    3.N         0.732088    3.103589   -3.507462\n', '    4.O         1.036235    4.511509   -1.155467\n', '    5.H        -1.021033    2.492720   -2.619835\n', '    6.C         0.622394    1.267878   -1.873211\n', '    7.C         2.078027    1.326152   -1.520786\n', '    8.C         2.682689    1.059886   -0.310511\n', '    9.N         3.043432    1.699370   -2.452702\n', '   10.N         4.030026    1.272781   -0.513057\n', '   11.C         4.204006    1.656625   -1.805130\n', '   12.H         0.459374    0.556696   -2.696962\n', '   13.H         0.059983    0.893944   -1.007546\n', '   14.H         4.765004    1.154494    0.178552\n', '   15.H         2.287819    0.745104    0.648219\n', '   16.H         5.179126    1.886053   -2.222020\n', '   17.H         1.746646    2.949051   -3.514088\n', '   18.C         0.116261    3.669899   -4.570495\n', '   19.C         1.066758    4.163082   -5.676880\n', '   20.N         0.628726    3.649366   -6.985307\n', '   21.O        -1.118659    3.820901   -4.641589\n', '   22.H         2.094551    3.846530   -5.420122\n', '   23.C         1.034845    5.712798   -5.678647\n', '   24.C         2.048546    6.330190   -6.591811\n', '   25.C         3.183634    7.038162   -6.251402\n', '   26.N         1.957571    6.237794   -7.978747\n', '   27.N         3.784648    7.378611   -7.445164\n', '   28.C         3.021062    6.880123   -8.453494\n', '   29.H         1.213004    6.072568   -4.655978\n', '   30.H         0.018549    6.024886   -5.966448\n', '   31.H         4.640487    7.915650   -7.552906\n', '   32.H         3.602852    7.323862   -5.293780\n', '   33.H         3.275149    7.012325   -9.500164\n', '   34.H         1.116787    4.190457   -7.710565\n', '   35.H         0.946017    2.681378   -7.092069\n', '   36.C        -3.152376    3.661853   -0.890228\n', '   37.C        -2.051301    2.872826   -0.130124\n', '   38.N        -0.784121    3.589140   -0.176842\n', '   39.O        -2.977137    4.849226   -1.208529\n', '   40.H        -1.932290    1.885376   -0.596846\n', '   41.C        -2.424253    2.641239    1.362790\n', '   42.C        -2.611358    3.901332    2.153073\n', '   43.C        -3.742411    4.358501    2.796229\n', '   44.N        -1.572944    4.811197    2.334583\n', '   45.N        -3.383081    5.557282    3.373777\n', '   46.C        -2.079943    5.795083    3.070922\n', '   47.H        -1.616748    2.035563    1.800227\n', '   48.H        -3.337512    2.037494    1.421046\n', '   49.H        -3.984837    6.154928    3.933573\n', '   50.H        -4.740398    3.950164    2.901125\n', '   51.H        -1.551891    6.681466    3.406326\n', '   52.H        -0.682573    4.302150    0.560805\n', '   53.C        -5.180655    1.094741   -2.344621\n', '   54.C        -4.739381    1.647788   -0.972371\n', '   55.N        -4.313649    3.027758   -1.192181\n', '   56.O        -5.839718    1.815707   -3.117678\n', '   57.H        -3.901578    1.061117   -0.578344\n', '   58.C        -5.923718    1.612045    0.042692\n', '   59.C        -6.210833    0.270277    0.638093\n', '   60.C        -6.014146   -0.125010    1.946043\n', '   61.N        -6.738729   -0.789075   -0.089549\n', '   62.N        -6.427732   -1.437490    2.006694\n', '   63.C        -6.852953   -1.798431    0.768439\n', '   64.H        -6.814714    2.017642   -0.461228\n', '   65.H        -5.677915    2.310891    0.853151\n', '   66.H        -6.425109   -2.028287    2.833449\n', '   67.H        -5.637029    0.398860    2.816338\n', '   68.H        -7.230757   -2.790400    0.545357\n', '   69.H        -4.971775    3.588641   -1.738719\n', '   70.C        -6.564422   -1.416569   -3.992049\n', '   71.C        -5.142956   -0.812672   -3.894836\n', '   72.N        -4.822210   -0.172271   -2.624198\n', '   73.O        -6.953368   -1.830616   -5.100613\n', '   74.H        -5.131330   -0.034324   -4.671551\n', '   75.C        -4.056540   -1.859289   -4.240643\n', '   76.C        -3.847876   -2.897030   -3.179326\n', '   77.C        -3.993804   -4.265137   -3.259200\n', '   78.N        -3.457522   -2.545638   -1.888566\n', '   79.N        -3.689615   -4.746417   -2.002943\n', '   80.C        -3.378773   -3.686340   -1.210821\n', '   81.H        -3.119095   -1.311195   -4.420713\n', '   82.H        -4.341118   -2.340933   -5.183835\n', '   83.H        -3.687337   -5.722669   -1.721205\n', '   84.H        -4.281498   -4.919358   -4.073232\n', '   85.H        -3.100400   -3.795031   -0.167887\n', '   86.H        -4.283203   -0.747270   -1.956653\n', '   87.C        -8.981075   -3.322085   -2.771425\n', '   88.C        -8.719362   -1.814950   -2.809071\n', '   89.N        -7.314726   -1.425261   -2.873163\n', '   90.O        -7.908804   -4.088495   -3.057033\n', '   91.O       -10.072455   -3.783837   -2.463422\n', '   92.H        -8.202320   -5.023823   -2.961821\n', '   93.H        -9.039754   -1.485479   -1.810565\n', '   94.C        -9.650688   -1.071893   -3.842655\n', '   95.C       -10.355266   -1.891031   -4.884045\n', '   96.C        -9.839050   -2.627333   -5.932886\n', '   97.N       -11.744403   -1.969897   -4.902473\n', '   98.N       -10.928942   -3.159294   -6.588398\n', '   99.C       -12.050628   -2.739287   -5.942948\n', '  100.H        -9.027383   -0.304278   -4.318245\n', '  101.H       -10.425118   -0.544384   -3.272609\n', '  102.H       -10.899141   -3.753629   -7.412167\n', '  103.H        -8.819708   -2.808535   -6.246784\n', '  104.H       -13.050058   -3.014988   -6.264143\n', '  105.H        -6.923713   -1.097143   -1.964569\n'
for x in range(len(out_file_data)):
    initial_list = ','.join(out_file_data[x].split())
    # Conditional Statement to remove '.' from number (ex. 1. = 1, 12. = 12)
    if x <= 8:
        initial_list = initial_list[2:]
    elif x >= 9 and x < 99:
        initial_list = initial_list[3:]
    else:
        initial_list = initial_list[4:]








'''if x <= 9:
    initial_list = initial_list[2:]
elif 9 > x < 100:
    initial_list = initial_list[3:]
elif x > 99:
    initial_list = initial_list[4:]'''


